N1, TARGET = 7, 77
KADD, KMUL = 1, 2

def gameOver( n1, n2 ):
  return n1+n2 >= TARGET

# определим функцию win(n1,n2,byMove), которая возвращает истинное
# логическое значение (True), если в позиции (n1, n2)
# можно гарантированно выиграть не более чем за byMove ходов:
def win( n1, n2, byMove ):
  if gameOver(n1, n2): return False

# Игрок выигрывает в некоторой позиции не более чем за byMove ходов,
  # если все его возможные ходы ведут в проигрышные (для соперника) позиции,
  # причем при любом ходе соперник проигрывает не более чем за byMove-1 ходов:
  return lose( n1+KADD, n2, byMove-1 ) or \
         lose( n1*KMUL, n2, byMove-1 ) or \
         lose( n1, n2+KADD, byMove-1 ) or \
         lose( n1, n2*KMUL, byMove-1 )
# Обратите внимание на логическую операцию or: для выигрыша достаточно,
# чтобы хотя бы один ход создавал проигрышную позицию для соперника.


def lose( n1, n2, byMove ):
  if gameOver(n1, n2): return True
  # Если уже не осталось ходов (byMove==0),
  # результат работы функции равен False: игра окончена, а ходов уже нет.
  if byMove == 0: return False
  # В общем случае проверяем возможные ходы:  если все они приводят
  # к выигрышу соперника не более чем за byMove ходов, то позиция проигрышная,
  # причем проигрыш наступит не позже,
  # чем хода с номером byMove (дольше сопротивляться не получится).
  return win( n1+KADD, n2, byMove ) and \
         win( n1*KMUL, n2, byMove ) and \
         win( n1, n2+KADD, byMove ) and \
         win( n1, n2*KMUL, byMove )

from math import ceil
ans1 = min( ceil((TARGET-N1)/KMUL/KMUL),
            ceil(TARGET-N1*KMUL*KMUL) )
ans2, ans3 = [], []

# Массив ans2 содержит все значения s,
# при которых есть стратегия выигрыша в 2 хода,
# но нет стратегии гарантированного выигрыша за 1 ход;
# массив ans3 содержит все значения s, при которых тот,
# кто начинает игру, проигрывает за 2 хода, но не всегда проиграет за 1 ход.
for s in range(ans1, TARGET-N1+1):
  if win(N1, s, 2) and not win(N1, s, 1):
    ans2.append(s)
  if lose(N1, s, 2) and not lose(N1, s, 1):
    ans3.append(s)

print("--- Ответы ---")
print("19. ", ans1)
print("20. ", sorted(ans2))
print("21. ", ans3)

# P-00 (демо-2021). Два игрока, Петя и Ваня, играют в следующую игру. Перед игроками лежат две кучи камней. Игроки ходят по очереди, первый ход делает Петя. За один ход игрок может добавить в одну из куч (по своему выбору) один камень или увеличить количество камней в куче в два раза. Игра завершается в тот момент, когда суммарное количество камней в кучах становится не менее 77. Победителем считается игрок, сделавший последний ход, т.е. первым получивший такую позицию, при которой в кучах будет 77 или больше камней. В начальный момент в первой куче было семь камней, во второй куче – S камней; 1 ≤ S ≤ 69.
# Задание 19.
# Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети. Укажите минимальное значение S, когда такая ситуация возможна.
#
# В задачах такого типа «неудачным» считается такой ход Пети, после которого
# 1)	он проиграет, хотя мог бы выиграть, ИЛИ...
# 2)	он проиграет быстрее (за меньшее число ходов) чем мог бы, если бы старался затянуть игру.
#
# Задание 20.
# Найдите два таких значения S, при которых у Пети есть выигрышная стратегия, причём одновременно выполняются два условия:
# − Петя не может выиграть за один ход;
# − Петя может выиграть своим вторым ходом независимо от того, как будет ходить Ваня.
# Найденные значения запишите в ответе в порядке возрастания.
# Задание 21
# Найдите минимальное значение S, при котором одновременно выполняются два условия:
# – у Вани есть выигрышная стратегия, позволяющая ему выиграть первым или вторым ходом при любой игре Пети;
# – у Вани нет стратегии, которая позволит ему гарантированно выиграть первым ходом.
